/*
Internet Golf API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package golfsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeployContainerInputBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployContainerInputBody{}

// DeployContainerInputBody struct for DeployContainerInputBody
type DeployContainerInputBody struct {
	// A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`
	ImageName string `json:"imageName"`
	RegistryAuthToken *string `json:"registryAuthToken,omitempty"`
	RegistryUrl string `json:"registryUrl"`
	Url string `json:"url"`
}

type _DeployContainerInputBody DeployContainerInputBody

// NewDeployContainerInputBody instantiates a new DeployContainerInputBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployContainerInputBody(imageName string, registryUrl string, url string) *DeployContainerInputBody {
	this := DeployContainerInputBody{}
	this.ImageName = imageName
	this.RegistryUrl = registryUrl
	this.Url = url
	return &this
}

// NewDeployContainerInputBodyWithDefaults instantiates a new DeployContainerInputBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployContainerInputBodyWithDefaults() *DeployContainerInputBody {
	this := DeployContainerInputBody{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *DeployContainerInputBody) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployContainerInputBody) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *DeployContainerInputBody) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *DeployContainerInputBody) SetSchema(v string) {
	o.Schema = &v
}

// GetImageName returns the ImageName field value
func (o *DeployContainerInputBody) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *DeployContainerInputBody) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *DeployContainerInputBody) SetImageName(v string) {
	o.ImageName = v
}

// GetRegistryAuthToken returns the RegistryAuthToken field value if set, zero value otherwise.
func (o *DeployContainerInputBody) GetRegistryAuthToken() string {
	if o == nil || IsNil(o.RegistryAuthToken) {
		var ret string
		return ret
	}
	return *o.RegistryAuthToken
}

// GetRegistryAuthTokenOk returns a tuple with the RegistryAuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployContainerInputBody) GetRegistryAuthTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RegistryAuthToken) {
		return nil, false
	}
	return o.RegistryAuthToken, true
}

// HasRegistryAuthToken returns a boolean if a field has been set.
func (o *DeployContainerInputBody) HasRegistryAuthToken() bool {
	if o != nil && !IsNil(o.RegistryAuthToken) {
		return true
	}

	return false
}

// SetRegistryAuthToken gets a reference to the given string and assigns it to the RegistryAuthToken field.
func (o *DeployContainerInputBody) SetRegistryAuthToken(v string) {
	o.RegistryAuthToken = &v
}

// GetRegistryUrl returns the RegistryUrl field value
func (o *DeployContainerInputBody) GetRegistryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value
// and a boolean to check if the value has been set.
func (o *DeployContainerInputBody) GetRegistryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryUrl, true
}

// SetRegistryUrl sets field value
func (o *DeployContainerInputBody) SetRegistryUrl(v string) {
	o.RegistryUrl = v
}

// GetUrl returns the Url field value
func (o *DeployContainerInputBody) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *DeployContainerInputBody) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *DeployContainerInputBody) SetUrl(v string) {
	o.Url = v
}

func (o DeployContainerInputBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployContainerInputBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["imageName"] = o.ImageName
	if !IsNil(o.RegistryAuthToken) {
		toSerialize["registryAuthToken"] = o.RegistryAuthToken
	}
	toSerialize["registryUrl"] = o.RegistryUrl
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *DeployContainerInputBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageName",
		"registryUrl",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeployContainerInputBody := _DeployContainerInputBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeployContainerInputBody)

	if err != nil {
		return err
	}

	*o = DeployContainerInputBody(varDeployContainerInputBody)

	return err
}

type NullableDeployContainerInputBody struct {
	value *DeployContainerInputBody
	isSet bool
}

func (v NullableDeployContainerInputBody) Get() *DeployContainerInputBody {
	return v.value
}

func (v *NullableDeployContainerInputBody) Set(val *DeployContainerInputBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployContainerInputBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployContainerInputBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployContainerInputBody(val *DeployContainerInputBody) *NullableDeployContainerInputBody {
	return &NullableDeployContainerInputBody{value: val, isSet: true}
}

func (v NullableDeployContainerInputBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployContainerInputBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


