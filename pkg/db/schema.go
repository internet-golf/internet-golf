package db

type ServedThingType string

const (
	StaticFiles     ServedThingType = "StaticFiles"
	DockerContainer ServedThingType = "DockerContainer"
	// not implemented yet
	Redirect ServedThingType = "Redirect"
	// low-level deployment type; currently just used to expose the admin api
	ReverseProxy ServedThingType = "ReverseProxy"
)

type ExternalSourceType string

const (
	Github ExternalSourceType = "Github"
)

type ExternalUser struct {
	ExternalId      string `storm:"id"`
	ExternalSource  ExternalSourceType
	FullPermissions bool
	// TODO: implement granular permissions, like this:
	// deploymentsTheyHaveAccessTo []string
}

type BearerToken struct {
	Id string `storm:"id"`
	// generated by bcrypt - includes built-in salt
	TokenHash       []byte
	FullPermissions bool
	// TODO: implement granular permissions, like this:
	// deploymentsTheyHaveAccessTo []string
}

// TODO: since this is used by the Huma API, it probably should have more docs
// and stuff in the struct tags

type DeploymentMetadata struct {
	Url Url `json:"" storm:"id"`

	// assuming that there won't be multiple external sources...
	// TODO: probably move this to the auth section?
	// for github repos, the ExternalSource has the format "repoOwner/repoName"
	// or "repoOwner/repoName#branch-name"
	ExternalSource     string             `json:"externalSource,omitempty"`
	ExternalSourceType ExternalSourceType `json:"externalSourceType,omitempty"`

	Tags []string `json:"tags,omitempty"`

	// if this is true and the deployment is at the path "/thing", then the
	// "/thing" in the path will be transparently passed through to the
	// underlying resource instead of being removed (which is the default)
	PreserveExternalPath bool `json:"preserveExternalPath,omitempty"`

	// this is `true` for internal deployments like the one for the admin API
	DontPersist bool `json:"-"`
}

type DeploymentContent struct {
	// this is false if no actual content has been added to the deployment
	// (yet). TODO: exclude from API, but do not exclude from DB. (does this
	// even need to exist? why not just use len(ServedThing) > 0, or build in a
	// "NotSureYet" value for ServedThingType?)
	HasContent bool `json:"hasContent"`
	// for static files, this is the path to a local directory; for a docker
	// container, this is a port number (?); for a redirect, this is a url or url
	// path; for a reverse proxy, this is a host and port (probably "localhost:[port]")
	ServedThing     string          `json:"servedThing"`
	ServedThingType ServedThingType `json:"servedThingType"`
}

type Deployment struct {
	DeploymentMetadata `storm:"inline"`
	DeploymentContent  `storm:"inline"`
}

type Url struct {
	Domain string `json:"domain"`
	Path   string `json:"path,omitempty"`
}

func (u *Url) Equals(v *Url) bool {
	return u.Domain == v.Domain && u.Path == v.Path
}

func (u Url) String() string {
	return u.Domain + u.Path
}
